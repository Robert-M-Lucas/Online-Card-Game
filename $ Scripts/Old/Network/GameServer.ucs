// Author: Robert Lucas
using System.Collections.Generic;
using System.Net;
using UnityEngine;
using System.Net.Sockets;
using System;
using System.Threading;
using System.Text;
using Debug = UnityEngine.Debug;

// Game Server

public class GameServer : ClientServerParent
{
    public Thread AcceptThread;
    public Thread ResponseThread;
    public Thread KickThread;
    public Thread GameManagerThread;
    public Thread CreateSendStringThread;

    private int UIDCounter = 1;

    private string[] ContentQueue = new string[1024];
    private PlayerNetworkData[] PlayerQueue = new PlayerNetworkData[1024];
    private int QueueReadCursor = 0;
    private int QueueWriteCursor = 0;

    public List<int> Phases = new List<int> { 0, 2 };

    public bool Local;

    public ServerGameManager GameManager;

    public bool Ready = false;

    public bool InGame = false;

    private string PlayerUpdateString;

    // Create server
    public GameServer(NetworkManager net, bool local)
    {
        Local = local;
        netManager = net;
        UID = 0;

        GameManager = new ServerGameManager(this);
        GameManagerThread = new Thread(GameManager.MainLoop);
        CreateSendStringThread = new Thread(CreateUpdateString);
    }

    // Start server
    public void StartServer(string name)
    {
        Name = CheckName(name);

        if (Name == "") { return; }

        Players.Add(new PlayerNetworkData(Name, 0));
        if (AcceptThread != null)
        {
            AcceptThread.Abort();
        }
        // Accept new clients
        AcceptThread = new Thread(AcceptClients);
        AcceptThread.Start();
        // Respond to Clients
        ResponseThread = new Thread(StateResponse);
        ResponseThread.Start();
        // Kick unresponsive clients
        KickThread = new Thread(KickInactive);
        KickThread.Start();
    }

    // Stop server
    public void Stop()
    {
        Debug.Log("Server Thread Stop");

        running = false;

        Thread.Sleep(100);

        try
        {
            if (AcceptThread != null)
            {
                AcceptThread.Abort();
            }
        }
        catch { }

        try
        {
            if (ResponseThread != null)
            {
                ResponseThread.Abort();
            }
        }
        catch { }

        try
        {
            if (KickThread != null)
            {
                KickThread.Abort();
            }
        }
        catch { }

        try
        {
            if (Handler != null)
            {
                Handler.Shutdown(SocketShutdown.Both);
                Handler.Close();
            }
        }
        catch { }

        try
        {
            GameManagerThread.Abort();
        }
        catch { }

        foreach (PlayerNetworkData CurrentPlayer in Players)
        {
            try
            {
                CurrentPlayer.Handler.Shutdown(SocketShutdown.Both);
            }
            catch { }
        }



    }

    // Accept client
    void AcceptClients()
    {
        Debug.Log("Server Thread Start");

        IPAddress ipAddress;

        if (Local)
        {
            ipAddress = IPAddress.Any;
        }
        else
        {
            ipAddress = IPAddress.Any;
        }

        IPEndPoint localEndPoint = new IPEndPoint(ipAddress, 8108);


        try
        {


            Socket listener = new Socket(ipAddress.AddressFamily, SocketType.Stream, ProtocolType.Tcp);

            listener.Bind(localEndPoint);

            listener.Listen(100);
            while (running)
            {
                Debug.Log("Waiting for a connection...");
                Handler = listener.Accept();

                // Incoming data from the client.    
                string data = null;
                byte[] bytes = null;

                while (true)
                {
                    bytes = new byte[1024];
                    int bytesRec = Handler.Receive(bytes);
                    data += Encoding.ASCII.GetString(bytes, 0, bytesRec);
                    if (data.IndexOf("<EOF>") > -1)
                    {
                        break;
                    }
                }

                Debug.Log("Text received : {0}" + data);

                if (data.Substring(0, 4) == "0000")
                {

                    // Kick client on version mismatch
                    if (data.Substring(4, data.Length - 9).Split(';')[1] != netManager.Version)
                    {
                        Debug.Log("Client has wrong version - " + data.Substring(4, data.Length - 9).Split(';')[1]);
                        Handler.Send(Encoding.ASCII.GetBytes("99971" + netManager.Version + "<EOF>"));
                        continue;
                    }


                    string sendString = "";

                    foreach (PlayerNetworkData playerNetworkData in Players)
                    {
                        sendString += playerNetworkData.Name + ":" + playerNetworkData.UID.ToString() + ";";
                    }


                    sendString = "00011" + data.Substring(4, data.Length - 9).Split(';')[0] + ":" + UIDCounter.ToString() + ";" + sendString;

                    PlayerNetworkData CurrentPlayer = new PlayerNetworkData(data.Substring(4, data.Length - 9).Split(';')[0], UIDCounter, Handler);
                    Players.Add(CurrentPlayer);
                    UIDCounter += 1;



                    byte[] msg = Encoding.ASCII.GetBytes(sendString + "<EOF>");
                    Handler.Send(msg);
                    Handler.BeginReceive(CurrentPlayer.buffer, 0, 1024, 0, new AsyncCallback(ReadCallback), CurrentPlayer);
                }
            }
        }
        catch (Exception e)
        {
            Debug.Log("ERROR");
            Debug.Log(e.ToString());
        }
    }

    // Recieve data
    private void ReadCallback(IAsyncResult ar)
    {
        String content = String.Empty;

        // Retrieve the state object and the handler socket  
        // from the asynchronous state object.  
        PlayerNetworkData CurrentPlayer = (PlayerNetworkData)ar.AsyncState;
        Socket handler = CurrentPlayer.Handler;

        if (!Players.Contains(CurrentPlayer)) { return; }

        // Read data from the client socket.
        int bytesRead = handler.EndReceive(ar);

        if (bytesRead > 0)
        {
            // There  might be more data, so store the data received so far.  
            CurrentPlayer.sb.Append(Encoding.ASCII.GetString(
                CurrentPlayer.buffer, 0, bytesRead));

            // Check for end-of-file tag. If it is not there, read
            // more data.  
            content = CurrentPlayer.sb.ToString();
            if (content.IndexOf("<EOF>") > -1)
            {
                //Debug.Log("Recieved: " + content);

                CurrentPlayer.RecievedFrom = true;

                foreach (string subcontent in content.Split(new[] { "<EOF>" }, StringSplitOptions.None))
                {
                    if (subcontent.Length == 0) { continue; }

                    if (QueueWriteCursor > 1023) { QueueWriteCursor = 0; };
                    QueueWriteCursor += 1;
                    PlayerQueue[QueueWriteCursor - 1] = CurrentPlayer;
                    ContentQueue[QueueWriteCursor - 1] = subcontent;
                }
                CurrentPlayer.Reset(); // Reset buffers

                handler.BeginReceive(CurrentPlayer.buffer, 0, 1024, 0,
                new AsyncCallback(ReadCallback), CurrentPlayer); // Listen again
            }
            else
            {
                // Not all data received. Get more.  
                handler.BeginReceive(CurrentPlayer.buffer, 0, 1024, 0,
                new AsyncCallback(ReadCallback), CurrentPlayer);
            }
        }
        else
        {
            handler.BeginReceive(CurrentPlayer.buffer, 0, 1024, 0,
                new AsyncCallback(ReadCallback), CurrentPlayer);
        }
    }

    // Start the match
    public void StartGame(int level)
    {
        Phases = new List<int> { 10, 12, 14 };
        scene = level;
        // Start the game manager
        if (GameManagerThread != null) { GameManagerThread.Start(); }
        // Start creating update strings
        if (CreateSendStringThread != null) { CreateSendStringThread.Start(); }
    }

    // Respond to player
    private void StateResponse()
    {
        while (running)
        {
            try
            {
                // Iterate through queue
                string content = ContentQueue[QueueReadCursor];
                PlayerNetworkData CurrentPlayer = PlayerQueue[QueueReadCursor];

                //Debug.Log(content);

                if (content == null)
                {
                    continue;
                }

                // Start match when all players are ready

                int phase = int.Parse(content.Substring(0, 4));

                if (!Ready & phase >= 10 & CurrentPlayer.LevelReady == false)
                {
                    CurrentPlayer.LevelReady = true;

                    Players[0].LevelReady = true;

                    foreach (PlayerNetworkData player in Players)
                    {
                        if (player.LevelReady == false)
                        {
                            goto Skip;
                        }
                    }

                    Ready = true;
                }

                Skip:

                //Debug.Log(phase);


                if (phase < 5000 & !Phases.Contains(phase))
                {
                    StateReply("99991" + Phases[0].ToString()); // If client has wrong phase, switch
                    goto Next;
                }

                switch (phase)
                {
                    case 0:
                        // Requesting connection when already has socket
                        StateReply("00010"); // Terminate connection
                        CurrentPlayer.Handler.Shutdown(SocketShutdown.Both);
                        CurrentPlayer.Handler.Close();
                        Players.Remove(CurrentPlayer);
                        break;

                    // Requesting lobby players update
                    case 2:
                        string sendString = "00031";

                        foreach (PlayerNetworkData playerNetworkData in Players)
                        {
                            sendString += playerNetworkData.Name + ":" + playerNetworkData.UID.ToString() + ";";
                        }
                        StateReply(sendString);
                        break;

                    // Asking what scene to switch to
                    case 10:
                        StateReply("00111" + scene.ToString());
                        break;
                    // Giving player position and data update - respond with data of all clients
                    case 12:
                        // Update data for that player
                        if (content[4] == '@')
                        {
                            CurrentPlayer.Dead = true;
                            CurrentPlayer.Sector = 0;
                            CurrentPlayer.Lap = 0;
                            CurrentPlayer.DistToNext = 100000;
                        }
                        else
                        {
                            try
                            {
                                CurrentPlayer.Dead = false;
                                string[] split = content.Substring(4, content.Length - 4).Split(';');
                                CurrentPlayer.Position = new Vector3(float.Parse(split[0]), float.Parse(split[1]), float.Parse(split[2]));
                                CurrentPlayer.YRotation = float.Parse(split[3]);
                                CurrentPlayer.Sector = int.Parse(split[4]);
                                CurrentPlayer.Lap = int.Parse(split[5]);
                                CurrentPlayer.DistToNext = float.Parse(split[6]);
                                CurrentPlayer.MovementState = int.Parse(split[7]);
                                CurrentPlayer.AnimSpeed = split[8];
                            }
                            catch (Exception e)
                            {
                                Debug.LogException(e);
                                Debug.LogError(content);
                            }
                        }

                        // Reply with data for all other players
                        StateReply(PlayerUpdateString);
                        break;

                    case 5000:
                        Debug.Log(content);
                        Debug.Log(content.Substring(4, content.Length - 4));
                        if (CurrentPlayer.QueueIDs.Count == 0) { break; }

                        if (CurrentPlayer.QueueIDs[0] == int.Parse(content.Substring(4, content.Length - 4)))
                        {
                            CurrentPlayer.QueueIDs.RemoveAt(0);
                            CurrentPlayer.SendQueue.RemoveAt(0);
                        }
                        break;
                }

            // Iterate through queue
            Next:

                PlayerQueue[QueueReadCursor] = null;
                ContentQueue[QueueReadCursor] = null;
                QueueReadCursor += 1;
                if (QueueReadCursor > 1023) { QueueReadCursor = 0; }
            }
            catch (Exception e)
            {
                Debug.LogException(e);
                PlayerQueue[QueueReadCursor] = null;
                ContentQueue[QueueReadCursor] = null;
                QueueReadCursor += 1;
                if (QueueReadCursor > 1023) { QueueReadCursor = 0; }
            }
        }
    }

    // Reply to player
    private void StateReply(string reply)
    {
        //Debug.Log("Replied " + reply + " to " + PlayerQueue[QueueReadCursor].Name);
        try
        {
            if (PlayerQueue[QueueReadCursor].SendQueue.Count > 0) { reply += "#" + PlayerQueue[QueueReadCursor].SendQueue[0] + ":" + PlayerQueue[QueueReadCursor].QueueIDs[0].ToString(); }
        }
        catch (Exception e)
        {
            Debug.LogException(e);
        }
        PlayerQueue[QueueReadCursor].Handler.Send(Encoding.ASCII.GetBytes(reply + "<EOF>"));
    }

    // Kick inactive players
    private void KickInactive()
    {
        while (running)
        {
            Thread.Sleep(netManager.ServerKickTime);
            for (int i = 1; i < Players.Count; i++)
            {
                if (Players[i] == null) { continue; }

                if (!Players[i].RecievedFrom & !Players[i].New)
                {
                    Debug.Log("Kicking Player " + Players[i].Name);
                    Players[i] = null;
                }
                else { Players[i].RecievedFrom = false; Players[i].New = false; }
            }
        }
    }

    // Create the string for updating clients on other clients data (not recreated for every player)
    private void CreateUpdateString()
    {
        while (running)
        {

            Players[0].Position = netManager.Position;
            Players[0].YRotation = netManager.YRotation;
            Players[0].Dead = netManager.Dead;
            Players[0].DistToNext = netManager.DistToNext;
            Players[0].Sector = netManager.Sector;
            Players[0].MovementState = netManager.MovementState;

            StringBuilder PositionData = new StringBuilder("00131");

            foreach (PlayerNetworkData player in Players)
            {
                if (!player.Dead)
                {
                    PositionData.Append(player.UID.ToString() + ";" + player.Position[0].ToString() + ";" + player.Position[1].ToString() + ";" + player.Position[2].ToString() + ";" + player.YRotation.ToString() +
                        ";" + player.Sector.ToString() + ";" + player.Lap.ToString() + ";" + player.DistToNext.ToString() + ";" + player.MovementState.ToString() +
                        ";" + player.AnimSpeed + ":");
                }
                else
                {
                    PositionData.Append(player.UID.ToString() + ";@:");
                }
            }

            PlayerUpdateString = PositionData.ToString();

            Thread.Sleep(netManager.ServerStringCreateTime);
        }
    }

}



/*
 * 9999 - Wrong phase
 * 9998 - Terminate connection
 * 9997 - Wrong version
 * 
 * 
*/
