using System.Collections;
using System.Collections.Generic;
using System.Net;
using System.IO;
using UnityEngine;
using UnityEngine.UI;
using System.Net.Sockets;
using System;
using System.Threading;
using System.Text;
using System.Diagnostics;
using Debug = UnityEngine.Debug;


public class GameClient : ClientServerParent
{
    public Thread PingThread;
    public Thread ResponseThread;
    private NetworkManager netManager;
    private string IP;
    public string Name;

    private int RetryTimeout = 100;
    private int Retried = 0;

    public bool InGame = false;

    public bool Running = true;

    public int Phase = 2;

    IPHostEntry host;
    IPAddress ipAddress;
    IPEndPoint remoteEP;
    Socket sender;

    public List<PlayerNetworkData> Players = new List<PlayerNetworkData>();

    public int UID;

    public int scene = -1;

    private byte[] buffer = new byte[1024];
    public StringBuilder sb = new StringBuilder();

    public float[] Position = new float[3];

    private int MsTick;

    private string[] BannedChars = new string[] { ";", ":", "-", "#" };

    public GameClient(NetworkManager net, int msTick)
    {
        netManager = net;
        MsTick = msTick;
        Debug.Log(msTick);
    }

    public void StartClient(string ip, string name)
    {
        if (name.Length < 1)
        {
            name = "Uncreative";
        }
        Name = name;

        foreach (string banned in BannedChars)
        {
            if (name.Contains(banned))
            {
                netManager.QuitLobby("Name can't contain '" + banned + "'");
                return;
            }
        }

        IP = ip;
        if (IP.Length == 0)
        {
            IP = "127.0.0.1";
        }
        if (PingThread != null)
        {
            PingThread.Abort();
        }
        PingThread = new Thread(ServerPinger);
        PingThread.Start();
    }

    public void Stop(bool Abort = true)
    {
        Running = false;
        Debug.Log("Client Thread Stop");
        netManager.Running = false;
        if (PingThread != null & Abort)
        {
            PingThread.Abort();
        }
        if (sender != null & sender.Connected)
        {
            sender.Shutdown(SocketShutdown.Both);
            sender.Close();
        }

    }

    private void ServerPinger()
    {
        Debug.Log("Client Thread Start");
        byte[] bytes = new byte[1024];

        try
        {
            // Connect to a Remote server  
            // Get Host IP Address that is used to establish a connection  
            // In this case, we get one IP address of localhost that is IP : 127.0.0.1  
            // If a host has multiple addresses, you will get a list of addresses  

            //host = Dns.GetHostEntry(IP);
            //ipAddress = host.AddressList[0];
            ipAddress = IPAddress.Parse(IP);
            remoteEP = new IPEndPoint(ipAddress, 8108);

            sender = new Socket(ipAddress.AddressFamily,
                SocketType.Stream, ProtocolType.Tcp);

            sender.Connect(remoteEP);

            Debug.Log("Socket connected to {0}" +
                sender.RemoteEndPoint.ToString());

            // Encode the data string into a byte array.    
            byte[] msg = Encoding.ASCII.GetBytes("0000" + Name + ";" + netManager.Version + "<EOF>");

            // Send the data through the socket.    
            int bytesSent = sender.Send(msg);

            // Receive the response from the remote device.    
            int bytesRec = sender.Receive(bytes);

            string rec = Encoding.ASCII.GetString(bytes, 0, bytesRec);
            Debug.Log("Echoed test = {0}" +
                rec);

            if (rec.Substring(0, 4) == "9997")
            {
                netManager.QuitLobby("Version doesn't match host: " + rec.Substring(5, rec.Length - 5));
                Stop(false);
                return;
            }
            if (rec[4] != '1')
            {
                netManager.QuitLobby("Host server refused connection");
                Stop(false);
                return;
            }

            string players_string = rec.Substring(5, rec.Length - 10); // Remove EOF

            Debug.Log(players_string);

            foreach (string player_data_string in players_string.Split(';'))
            {
                if (player_data_string.Length < 1) { break; }

                Players.Add(new PlayerNetworkData(player_data_string.Split(':')[0], int.Parse(player_data_string.Split(':')[1]), null, false));
            }

            UID = Players[0].UID;
        }
        catch (Exception e)
        {
            Debug.Log(e);
            netManager.QuitLobby(e.ToString());
            Stop();
        }

        sender.BeginReceive(buffer, 0, 1024, 0, new AsyncCallback(ReadCallback), Players[0]);

        SendLoop();
    }

    private void ReadCallback(IAsyncResult ar)
    {
        Debug.Log("Read Start");
        if (!Running) { return; }
        String content = String.Empty;

        PlayerNetworkData data = (PlayerNetworkData)ar.AsyncState;
        // Retrieve the state object and the handler socket  
        // from the asynchronous state object.  

        // Read data from the client socket.
        int bytesRead = sender.EndReceive(ar);

        if (bytesRead > 0)
        {
            // There  might be more data, so store the data received so far.  
            sb.Append(Encoding.ASCII.GetString(
                buffer, 0, bytesRead));

            // Check for end-of-file tag. If it is not there, read
            // more data.  
            content = sb.ToString();
            if (content.IndexOf("<EOF>") > -1)
            {
                Debug.Log("Recieved: " + content);

                buffer = new byte[1024];
                sb = new StringBuilder();

                try
                {
                    StateResponse(content);
                }
                catch (Exception e)
                {
                    Debug.Log(e);
                }

                sender.BeginReceive(buffer, 0, 1024, 0, new AsyncCallback(ReadCallback), data);
            }
            else
            {
                sender.BeginReceive(buffer, 0, 1024, 0, new AsyncCallback(ReadCallback), data);
            }
        }
        else
        {
            sender.BeginReceive(buffer, 0, 1024, 0, new AsyncCallback(ReadCallback), data);
        }
    }

    private void StateResponse(string content)
    {
        int phase = int.Parse(content.Substring(0, 4));



        if (content[4] == '0')
        {
            Debug.Log("Stop");
            netManager.QuitLobby("Host terminated connection");
            Stop();
        }

        Debug.Log(phase);

        switch (phase)
        {
            case 3:
                Debug.Log(content);
                bool[] stillExist = new bool[Players.Count];
                foreach (string player_data_string in content.Substring(5, content.Length - 10).Split(';'))
                {
                    if (player_data_string.Length < 1) { continue; }

                    int UID = int.Parse(player_data_string.Split(':')[1]);

                    for (int i = 0; i < Players.Count; i++)
                    {
                        if (Players[i].UID == UID)
                        {
                            Players[i].Name = player_data_string.Split(':')[0];
                            stillExist[i] = true;
                            goto BreakContinue;
                        }
                    }

                    Players.Add(new PlayerNetworkData(player_data_string.Split(':')[0], UID, null, false));
                BreakContinue:
                    continue;
                }

                int leftPlayer = Array.IndexOf(stillExist, false);

                if (leftPlayer != -1)
                {
                    Players.RemoveAt(leftPlayer);
                }


                break;

            case 11:
                scene = int.Parse(content.Substring(5, content.Length - 10));
                Debug.Log(scene);
                Phase = 12;
                break;

            case 13:
                Debug.Log(content);

                content = content.Substring(5, content.Length - 9);

                string[] PlayerStringData = content.Split(':');

                Debug.Log(content);

                foreach (string DataString in PlayerStringData)
                {
                    if (DataString.Length < 1) { break; }

                    string[] SubData = DataString.Split(';');

                    foreach (PlayerNetworkData LoopPlayer in Players)
                    {
                        if (LoopPlayer.UID.ToString() == SubData[0])
                        {
                            if (SubData[1] == "-")
                            {
                                LoopPlayer.Dead = true;
                                continue;
                            }

                            LoopPlayer.Position = new Vector3(float.Parse(SubData[1]), float.Parse(SubData[2]), float.Parse(SubData[3]));
                            LoopPlayer.YRotation = float.Parse(SubData[4]);
                            LoopPlayer.Sector = int.Parse(SubData[5]);
                            LoopPlayer.Lap = int.Parse(SubData[6]);
                        }
                    }
                }

                break;

            case 9999:
                int newPhase = int.Parse(content.Substring(5, content.Length - 10));
                Debug.Log("Switching phase to " + newPhase.ToString());
                Phase = newPhase;
                break;

            case 9998:
                Debug.Log("Stop");
                netManager.QuitLobby("Host terminated connection");
                Stop();
                break;

            default:
                break;
        }
    }

    private byte[] CombineBytes(byte[][] ByteArrs)
    {

        for (int i = 1; i < ByteArrs.Length; i++)
        {
            int length = ByteArrs[i - 1].Length;
            Array.Resize<byte>(ref ByteArrs[i], length + ByteArrs[i - 1].Length);
            Array.Copy(ByteArrs[i - 1], 0, ByteArrs[i], length, ByteArrs[i - 1].Length);
        }

        return ByteArrs[ByteArrs.Length - 1];
    }

    private void SendLoop()
    {
        while (Running)
        {
            Thread.Sleep(MsTick);
            switch (Phase)
            {
                case 2:
                    MsTick = 100;
                    StateReply("0002" + UID.ToString());
                    break;
                case 10:
                    MsTick = 50;
                    StateReply("0010");
                    break;
                case 12:
                    //byte[] combined = CombineBytes(new byte[][] { Encoding.ASCII.GetBytes("0012"),
                    //    BitConverter.GetBytes(Position[0]),
                    //    Encoding.ASCII.GetBytes(";"),
                    //    BitConverter.GetBytes(Position[1]),
                    //    Encoding.ASCII.GetBytes(";"),
                    //    BitConverter.GetBytes(Position[2]),
                    //    Encoding.ASCII.GetBytes("<EOF>") });
                    MsTick = 10;
                    if (netManager.Dead)
                    {
                        StateReply("0012-");
                    }
                    else
                    {
                        StateReply("0012" + netManager.Position[0].ToString() + ";" + netManager.Position[1].ToString() + 
                            ";" + netManager.Position[2].ToString() + ";" +
                        netManager.YRotation.ToString() + ";" + netManager.Sector.ToString() + ";" +
                        netManager.Lap.ToString() + ";" + netManager.DistToNext.ToString());
                    }
                    
                    break;
            }
        }
    }

    private void StateReply(string reply)
    {
        Debug.Log("Replied " + reply);
        sender.Send(Encoding.ASCII.GetBytes(reply + "<EOF>"));
    }
}

/*
 * Send 0000 + Name
 * Recieve 0001 + (0/1) + Player 1 name + ; + Player 2 name + ;
 * 
 * Send 0002
 * Rec 0001 + (0/1) + Player 1 name + ; + Player 2 name + ;
 * 
*/
